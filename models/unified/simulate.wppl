// simulates model forward with given params/context and prints results to stout:
// webppl simulate.wppl --require ./refModule/

// choose one of the three versions
// (M1): colorSize
// (M2): typicality
// (M3): nominal
var globalConfig = {modelVersion: 'colorSize'};

// then set base params and version-specific params
var paramConfig = {
  base : {
    alpha : 1,             // all models: soft-max optimality (0,20)
    costWeight : 1         // all models: relative weight on cost (0,1)
  },
  colorSize : {
    colorTyp : .8,         // typicality of color modifiers (.5,1)
    sizeTyp : .5,          // typicality of size modifiers (.5,1)
    colorVsSizeCost : .5,  // relative cost of producing color (w=0) vs. size (w=1)
    typWeight : 1          // fixed value assumed by colorSize model; not really a param
  },
  typicalityNominal : {
    lengthVsFreqCost: .5,  // relative weight on length (w=0) vs. freq (w=1)
    typWeight : 1          // how much to stretch empirical typ values
  }
};

// list of objects in context (target 1st)
var testContext = [["big", "green", "fan"],
		   ["big", "green", "tv"],
		   ["big", "green", "desk"],
		   ["big", "green", "couch"],
		   ["big", "green", "desk"],
		   ["big", "green", "chair"],
		   ["big", "green", "couch"],                                          
		   ["big", "green", "chair"]];

// Compile the appropriate params for chosen modelVersion 
var params = extend(globalConfig, paramConfig.base, (
  globalConfig.modelVersion === 'colorSize' ?
    paramConfig.colorSize :
    paramConfig.typicalityNominal
));

console.log(params);
// Run speakerModel
var speakerModel = initializeModel(extend(params, {
  lexicon: refModule.constructLexicon(params)
}));

console.log(speakerModel(testContext[0], testContext));
