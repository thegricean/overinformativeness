// run using:
// webppl overinfBDA.wppl --require ./refModule/

// util.seedRNG(2);
// util.seedRNG(10);
util.seedRNG(8);


var data = refModule.readCSV("./bdaInput/bda_data.csv");
console.log("Loading data complete...",+data.length+" data points");

var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading unique conditions complete..."+conditions.length+" conditions");

// var contextArrays = map(function(condition) {
//   constructContext(condition[2],condition[1],condition[0],condition[3],condition[4]);
// },conditions);
// var contextKeys = map(function(condition) {
//   [condition[2],condition[1],condition[0],condition[3],condition[4]].join("_");
// },conditions);
// var contexts = _.object(_.zip(contextKeys,contextArrays));
// console.log("Constructing contexts complete...");

var modelAnalysis = function() {
  // var params = {
  //   alpha : sample(Uniform({a:0,b:40})),
  //   lengthWeight : sample(Uniform({a:0,b:10})),
  //   cost_color : sample(Uniform({a:0,b:3})),
  //   cost_type : sample(Uniform({a:0,b:3})),
  //   color_only_cost : sample(Uniform({a:0,b:3})),
  //   theta : sample(Uniform({a:0,b:1}))
  // };

  // console.log(params);
  // note: uniformDrift helper equivalent to:
  // var makeUniformKernel = function(width) {
  //   return function(prevVal) {
  //     return Uniform({a:prevVal-width,
  //                     b:prevVal+width})}};
  var params = {
    alpha : uniformDrift({a:0,b:40,width:40/20}),
    lengthWeight : uniformDrift({a:0,b:10,width:10/20}),
    cost_color : uniformDrift({a:0,b:3,width:3/20}),
    cost_type : uniformDrift({a:0,b:3,width:3/20}),
    color_only_cost : uniformDrift({a:0,b:3,width:3/20})
    // theta : uniformDrift({a:0,b:1,width:1/20})
  };  
  

  // Run model and condition on data
  var score = sum(map(function(condition) {
    // console.log("Creating next context...");
    // console.log(condition[2]);
    // console.log(condition[1]);
    // console.log(condition[0]);
    var context = {condition: condition[0], 
                   context:[[condition[1],condition[2]],[condition[3],condition[4]],[condition[5],condition[6]]]};
    // console.log("condition... " +condition);
    // console.log("Context construction complete... "+context);
    // console.log(context);
    var target = context.context[0];
    // console.log("Generating model...");
    var model = OverinformativeModel(params,context.context);//domainInfo, params);
    var runModel = model.runModel;
    var speaker = model.speaker;
    // return sum(map(function(condition) {
    //   return sum(map(function(item) {
	    // Get model predictions
    // console.log("Running model...");

    var modelOutput = runModel(speaker, target);//, domainInfo);

    // console.log("Conditioning on data...");
	    // condition on data
    var itemData = refModule.getSubset(data, {condition:condition[0],
						  t_color:condition[1],
						  t_type:condition[2],
              d1_color:condition[3],
              d1_type:condition[4],
              d2_color:condition[5],
              d2_type:condition[6]
            });
    // console.log(itemData.length);
	  var score = sum(map(function(dataRow) {
     // console.log("Conditioning on data row..."+dataRow);
	   var utterance = dataRow[7];
     // console.log("utterance..."+utterance);
     // console.log(_.contains(modelOutput.support(),utterance));
     // console.log(modelOutput.score([],utterance));
     // console.log(utterance+","+modelOutput.score([],utterance)+","+condition[2]);
	   return modelOutput.score(utterance);
	  }, itemData));
    // display(score)
    // console.log(score);

	    // Store predictions
    foreach(modelOutput.support([]), function(s){
      query.add([condition[0], condition[1], condition[2], condition[3], condition[4], condition[5], condition[6], s], Math.exp(modelOutput.score(s)));
    });

    return score;
  }, conditions));

  // display(score);
  console.log(params);
  console.log(score);

  factor(score)
  // factor(Math.max(score, -1000));

  // console.log(query.table);
  // console.log(params);
  // return params
  return {predictive: query.table, params : params};
};

var outputERP = Infer({method:'MCMC', samples: 1000, lag: 10, verbose: true}, modelAnalysis);
// var outputERP = Infer({method:'MCMC', kernel : {HMC: {steps:5, stepSize:.01} }, samples: 500, burn: 200, verbose: true}, modelAnalysis); // seed8
//var outputERP = Infer({method:'MCMC', kernel : {HMC: {steps:5, stepSize:.0172} }, samples: 5, burn: 1, verbose: true}, modelAnalysis); // seed10

console.log('inference complete... printing');

// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed8-theta");
// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed10-theta");
// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed2-theta");
// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed8-theta");
// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-extended-hmc-seed10");
refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-extended-hmc-seed8");
// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed10");
// refModule.bayesianErpWriter(outputERP, "./bdaOutput/bda-hmc-seed8");

