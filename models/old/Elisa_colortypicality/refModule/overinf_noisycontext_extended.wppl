var uniformDraw = function (xs) {
	return xs[randomInteger(xs.length)];
};

var foreach = function(lst, fn) {
	var foreach_ = function(i) {
		if (i < lst.length) {
			fn(lst[i]);
			foreach_(i + 1);
		}
	};
	foreach_(0);
};

var colors = ["yellow","orange","red","pink",
	      "green","blue","brown","black"];


var objects = [
	["blue","apple"],
	["green","apple"],
	["red","apple"],
	["black","avocado"],
	["green","avocado"],
	["red","avocado"],
	["blue","banana"],
	["brown","banana"],
	["yellow","banana"],
	["brown","carrot"],
	["orange","carrot"],
	["pink","carrot"],
	["green","pear"],
	["orange","pear"],
	["yellow","pear"],
	["black","pepper"],
    ["green","pepper"],
	["orange","pepper"],
	["red","pepper"],
	["green","tomato"],
	["pink","tomato"],
	["red","tomato"]
];

var typicality = {
  "apple" : {
    blue_apple : 0.462,
    green_apple : 0.961,
    red_apple : 0.953,
    black_avocado : 0.055,
    green_avocado : 0.022,
    red_avocado : 0.080,
    blue_banana : 0.044,
    brown_banana : 0.040,
    yellow_banana : 0.043,
    brown_carrot : 0.059,
    orange_carrot : 0.013,
    pink_carrot : 0.052,
    green_pear : 0.196,
    orange_pear : 0.142,
    yellow_pear : 0.140,
    black_pepper : 0.058,
    orange_pepper : 0.043,
    red_pepper : 0.027,
    green_pepper : 0.030,
    green_tomato : 0.102,
    pink_tomato : 0.022,
    red_tomato : 0.093
  },
  "avocado" : {
    blue_apple : 0.039,
    green_apple : 0.022,
    red_apple : 0.052,
    black_avocado : 0.812,
    green_avocado : 0.966,
    red_avocado : 0.696,
    blue_banana : 0.016,
    brown_banana : 0.048,
    yellow_banana : 0.024,
    brown_carrot : 0.053,
    orange_carrot : 0.034,
    pink_carrot : 0.061,
    green_pear : 0.055,
    orange_pear : 0.055,
    yellow_pear : 0.026,
    black_pepper : 0.046,
    orange_pepper : 0.045,
    red_pepper : 0.068,
    green_pepper : 0.015,
    green_tomato : 0.017,
    pink_tomato : 0.065,
    red_tomato : 0.023
  },
  "banana" : {
    blue_apple : 0.040,
    green_apple : 0.072,
    red_apple : 0.070,
    black_avocado : 0.036,
    green_avocado : 0.046,
    red_avocado : 0.070,
    blue_banana : 0.419,
    brown_banana : 0.657,
    yellow_banana : 0.979,
    brown_carrot : 0.076,
    orange_carrot : 0.079,
    pink_carrot : 0.021,
    green_pear : 0.021,
    orange_pear : 0.010,
    yellow_pear : 0.071,
    black_pepper : 0.069,
    orange_pepper : 0.011,
    red_pepper : 0.019,
    green_pepper : 0.026,
    green_tomato : 0.096,
    pink_tomato : 0.037,
    red_tomato : 0.013
  },
  "carrot" : {
    blue_apple : 0.035,
    green_apple : 0.023,
    red_apple : 0.011,
    black_avocado : 0.016,
    green_avocado : 0.060,
    red_avocado : 0.008,
    blue_banana : 0.039,
    brown_banana : 0.013,
    yellow_banana : 0.011,
    brown_carrot : 0.565,
    orange_carrot : 0.976,
    pink_carrot : 0.503,
    green_pear : 0.085,
    orange_pear : 0.052,
    yellow_pear : 0.016,
    black_pepper : 0.065,
    orange_pepper : 0.083,
    red_pepper : 0.036,
    green_pepper : 0.019,
    green_tomato : 0.013,
    pink_tomato : 0.056,
    red_tomato : 0.011
  },
  "pear" : {
    blue_apple : 0.004,
    green_apple : 0.140,
    red_apple : 0.014,
    black_avocado : 0.080,
    green_avocado : 0.045,
    red_avocado : 0.103,
    blue_banana : 0.012,
    brown_banana : 0.041,
    yellow_banana : 0.074,
    brown_carrot : 0.052,
    orange_carrot : 0.034,
    pink_carrot : 0.013,
    green_pear : 0.953,
    orange_pear : 0.686,
    yellow_pear : 0.924,
    black_pepper : 0.060,
    orange_pepper : 0.040,
    red_pepper : 0.077,
    green_pepper : 0.020,
    green_tomato : 0.045,
    pink_tomato : 0.011,
    red_tomato : 0.047
  },
  "pepper" : {
    blue_apple : 0.045,
    green_apple : 0.014,
    red_apple : 0.026,
    black_avocado : 0.080,
    green_avocado : 0.069,
    red_avocado : 0.104,
    blue_banana : 0.073,
    brown_banana : 0.060,
    yellow_banana : 0.070,
    brown_carrot : 0.086,
    orange_carrot : 0.043,
    pink_carrot : 0.049,
    green_pear : 0.016,
    orange_pear : 0.054,
    yellow_pear : 0.142,
    black_pepper : 0.637,
    orange_pepper : 0.841,
    red_pepper : 0.934,
    green_pepper : 0.941,
    green_tomato : 0.083,
    pink_tomato : 0.063,
    red_tomato : 0.049
  },
  "tomato" : {
    blue_apple : 0.034,
    green_apple : 0.044,
    red_apple : 0.088,
    black_avocado : 0.069,
    green_avocado : 0.052,
    red_avocado : 0.051,
    blue_banana : 0.042,
    brown_banana : 0.033,
    yellow_banana : 0.018,
    brown_carrot : 0.041,
    orange_carrot : 0.047,
    pink_carrot : 0.037,
    green_pear : 0.018,
    orange_pear : 0.022,
    yellow_pear : 0.023,
    black_pepper : 0.089,
    orange_pepper : 0.052,
    red_pepper : 0.018,
    green_pepper : 0.032,
    green_tomato : 0.738,
    pink_tomato : 0.412,
    red_tomato : 0.962
  },
  "fruit" : {
    blue_apple : 0.506,
    green_apple : 0.929,
    red_apple : 0.932,
    black_avocado : 0.539,
    green_avocado : 0.503,
    red_avocado : 0.329,
    blue_banana : 0.603,
    brown_banana : 0.726,
    yellow_banana : 0.973,
    brown_carrot : 0.092,
    orange_carrot : 0.019,
    pink_carrot : 0.051,
    green_pear : 0.937,
    orange_pear : 0.777,
    yellow_pear : 0.905,
    black_pepper : 0.182,
    orange_pepper : 0.194,
    red_pepper : 0.106,
    green_pepper : 0.183,
    green_tomato : 0.341,
    pink_tomato : 0.233,
    red_tomato : 0.413
  },
  "vegetable" : {
    blue_apple : 0.081,
    green_apple : 0.128,
    red_apple : 0.182,
    black_avocado : 0.332,
    green_avocado : 0.455,
    red_avocado : 0.236,
    blue_banana : 0.054,
    brown_banana : 0.077,
    yellow_banana : 0.055,
    brown_carrot : 0.623,
    orange_carrot : 0.895,
    pink_carrot : 0.401,
    green_pear : 0.115,
    orange_pear : 0.140,
    yellow_pear : 0.120,
    black_pepper : 0.531,
    orange_pepper : 0.777,
    red_pepper : 0.777,
    green_pepper : 0.824,
    green_tomato : 0.598,
    pink_tomato : 0.336,
    red_tomato : 0.745
  },
  "yellow" : {
    blue_apple : 0.078,
    green_apple : 0.187,
    red_apple : 0.011,
    black_avocado : 0.036,
    green_avocado : 0.053,
    red_avocado : 0.029,
    blue_banana : 0.058,
    brown_banana : 0.047,
    yellow_banana : 0.766,
    brown_carrot : 0.094,
    orange_carrot : 0.188,
    pink_carrot : 0.058,
    green_pear : 0.307,
    orange_pear : 0.121,
    yellow_pear : 0.703,
    black_pepper : 0.073,
    orange_pepper : 0.169,
    red_pepper : 0.049,
    green_pepper : 0.048,
    green_tomato : 0.058,
    pink_tomato : 0.031,
    red_tomato : 0.063
  },
  "orange" : {
    blue_apple : 0.022,
    green_apple : 0.027,
    red_apple : 0.085,
    black_avocado : 0.009,
    green_avocado : 0.028,
    red_avocado : 0.075,
    blue_banana : 0.093,
    brown_banana : 0.081,
    yellow_banana : 0.219,
    brown_carrot : 0.101,
    orange_carrot : 0.889,
    pink_carrot : 0.079,
    green_pear : 0.092,
    orange_pear : 0.831,
    yellow_pear : 0.341,
    black_pepper : 0.063,
    orange_pepper : 0.787,
    red_pepper : 0.276,
    green_pepper : 0.142,
    green_tomato : 0.064,
    pink_tomato : 0.106,
    red_tomato : 0.120
  },           
  "red" : {
    blue_apple : 0.060,
    green_apple : 0.088,
    red_apple : 0.762,
    black_avocado : 0.107,
    green_avocado : 0.018,
    red_avocado : 0.528,
    blue_banana : 0.057,
    brown_banana : 0.072,
    yellow_banana : 0.073,
    brown_carrot : 0.105,
    orange_carrot : 0.162,
    pink_carrot : 0.153,
    green_pear : 0.073,
    orange_pear : 0.156,
    yellow_pear : 0.057,
    black_pepper : 0.118,
    orange_pepper : 0.141,
    red_pepper : 0.864,
    green_pepper : 0.074,
    green_tomato : 0.064,
    pink_tomato : 0.111,
    red_tomato : 0.858
  },    
  "pink" : {
    blue_apple : 0.054,
    green_apple : 0.080,
    red_apple : 0.132,
    black_avocado : 0.088,
    green_avocado : 0.055,
    red_avocado : 0.116,
    blue_banana : 0.045,
    brown_banana : 0.040,
    yellow_banana : 0.079,
    brown_carrot : 0.135,
    orange_carrot : 0.112,
    pink_carrot : 0.498,
    green_pear : 0.048,
    orange_pear : 0.123,
    yellow_pear : 0.031,
    black_pepper : 0.040,
    orange_pepper : 0.036,
    red_pepper : 0.160,
    green_pepper : 0.025,
    green_tomato : 0.030,
    pink_tomato : 0.515,
    red_tomato : 0.198
  },   
  "green" : {
    blue_apple : 0.145,
    green_apple : 0.791,
    red_apple : 0.045,
    black_avocado : 0.032,
    green_avocado : 0.642,
    red_avocado : 0.084,
    blue_banana : 0.017,
    brown_banana : 0.058,
    yellow_banana : 0.031,
    brown_carrot : 0.068,
    orange_carrot : 0.048,
    pink_carrot : 0.046,
    green_pear : 0.640,
    orange_pear : 0.032,
    yellow_pear : 0.099,
    black_pepper : 0.101,
    orange_pepper : 0.053,
    red_pepper : 0.087,
    green_pepper : 0.929,
    green_tomato : 0.817,
    pink_tomato : 0.058,
    red_tomato : 0.084
  },    
  "blue" : {
    blue_apple : 0.896,
    green_apple : 0.069,
    red_apple : 0.079,
    black_avocado : 0.087,
    green_avocado : 0.067,
    red_avocado : 0.028,
    blue_banana : 0.917,
    brown_banana : 0.059,
    yellow_banana : 0.063,
    brown_carrot : 0.075,
    orange_carrot : 0.059,
    pink_carrot : 0.025,
    green_pear : 0.070,
    orange_pear : 0.102,
    yellow_pear : 0.053,
    black_pepper : 0.115,
    orange_pepper : 0.059,
    red_pepper : 0.018,
    green_pepper : 0.112,
    green_tomato : 0.050,
    pink_tomato : 0.075,
    red_tomato : 0.052
  },    
  "brown" : {
    blue_apple : 0.076,
    green_apple : 0.063,
    red_apple : 0.231,
    black_avocado : 0.103,
    green_avocado : 0.135,
    red_avocado : 0.368,
    blue_banana : 0.007,
    brown_banana : 0.868,
    yellow_banana : 0.108,
    brown_carrot : 0.860,
    orange_carrot : 0.141,
    pink_carrot : 0.051,
    green_pear : 0.053,
    orange_pear : 0.107,
    yellow_pear : 0.234,
    black_pepper : 0.128,
    orange_pepper : 0.285,
    red_pepper : 0.085,
    green_pepper : 0.071,
    green_tomato : 0.081,
    pink_tomato : 0.012,
    red_tomato : 0.160
  },    
  "black" : {
    blue_apple : 0.044,
    green_apple : 0.013,
    red_apple : 0.085,
    black_avocado : 0.952,
    green_avocado : 0.090,
    red_avocado : 0.066,
    blue_banana : 0.051,
    brown_banana : 0.204,
    yellow_banana : 0.061,
    brown_carrot : 0.168,
    orange_carrot : 0.056,
    pink_carrot : 0.048,
    green_pear : 0.056,
    orange_pear : 0.056,
    yellow_pear : 0.057,
    black_pepper : 0.838,
    orange_pepper : 0.032,
    red_pepper : 0.019,
    green_pepper : 0.044,
    green_tomato : 0.043,
    pink_tomato : 0.013,
    red_tomato : 0.025
  }
};

var colorSim = {
    "yellow" : {
        yellow : 1,
        blue : .05,
        brown : .4,
        green : .5,
        orange : .3,
        red : .09,
        black : .05,
        pink : .05
    },
    "blue" : {
        yellow : .05,
        blue : 1,
        brown : .01,
        green : .1,
        orange : .05,
        red : .05,
        black : .2,
        pink : .05
    },
    "brown" : {
        yellow : .4,
        blue : .01,
        brown : 1,
        green : .2,
        orange : .4,
        red : .1,
        black : .2,
        pink : .05
    },
    "green" : {
        yellow : .5,
        blue : .1,
        brown : .2,
        green : 1,
        orange : .05,
        red : .05,
        black : .05,
        pink : .05
    },
    "orange" : {
        yellow : .3,
        blue : .05,
        brown : .4,
        green : .05,
        orange : 1,
        red : .5,
        black : .05,
        pink : .1
    },
    "red" : {
        yellow : .09,
        blue : .05,
        brown : .1,
        green : .05,
        orange : .5,
        red : 1,
        black : .05,
        pink : .3
    },
    "black" : {
        yellow : .05,
        blue : .2,
        brown : .2,
        green : .05,
        orange : .05,
        red : .05,
        black : 1,
        pink : .05
    },
    "pink" : {
        yellow : .05,
        blue : .05,
        brown : .05,
        green : .05,
        orange : .1,
        red : .3,
        black : .05,
        pink : 1
    }
}

// TODO: represent context items as
// {color: ..., type: ...} instead of arrays
var getUtterancesOneFeature = function(context) {
	return _.unique(_.flatten(map(function(itemArr) {
    return [itemArr[0], itemArr[1], itemArr.join('_')];
  },context)));
};

var OverinformativeModel = function(params, trueContext) {

	// Cost of full utterances is sum of individual word costs,
  	// unless you just use a color, in which case you incur
  	// an additional costx
	var getUtteranceCost = function(utt) {
		var splited = utt.split("_");
	    if (splited.length == 2) {
	      return params.cost_color + params.cost_type;
	    } else {
	      return (_.contains(colors, splited[0]) ?
		      params.cost_color + params.color_only_cost :
		      params.cost_type);
   	 	}
	};

	// Looks up typicality of object for each word in utt,
	// centers them using theta, and adds them up
	var getTypicality = function(utt, object) {
	  var objStr = object.join("_");
	  return reduce(function(word, memo) {
	    var origTyp = typicality[word][objStr];
	    // var centeredTyp = origTyp - params.theta;
	    return memo + origTyp;
	  }, 0, utt.split('_'));
	};

	var uttFitness = function(utt, object) {
		// console.log("");
		// console.log("utt");
		// console.log(utt);
		// console.log("object");
		// console.log(object);
		// console.log("");
		return getTypicality(utt, object);  
	};

	var transform = function(obj) {
		// no uniformDraw but similarity weighted draw from all objects in the world 
		// color similarities from color patch study? --> yellow is not missperceived as blue, but orange as red and vice versa
		// type is misperceived in following way: color is always assumed to be typical 
			// - missperception increases with atypical color and missperceived object is the combination of 
			// an object that has target color as typical color and something that has a similar shape
			// (in this data set probably not very often as they all of very different shapes and things as berry,... are not in the world)
		return uniformDraw(remove(obj, objects));
	}
	
	var noisyObserve = function(context) {
		return map(function(obj) {
			return flip(params.perceptionNoise) ? transform(obj) : obj;
		}, context)
	};

    var getDeepCopy = function(m) {
        map(function(z) {return z}, m);
    };

    var getSimilarity = function(obj1, obj2) {
        return (1 + colorSim[obj1[0]][obj2[0]])/2;
    };

    // input: true and perceived context
    // output: value between 0 and 1 representing their similarity
    // idea: for each object in the first context check whether
        // there is an object of the same type in the second context;
        // if not, return 0 as the similarity and continue with next
        // object from first context;
        // if there is at least one, look up their color similarity, 
        // the one with the biggest similarity is deleted from the
        // context and the value is returned;
        // this has to be done for every possible ordering of the 
        // first context as otherwise cases such as
        // c1: blue ban, yellow ban, blue app
        // c2: yellow ban, red app, blue app
        // would go wrong as it would already choose the yellow ban
        // as a blue banana pendant even though there are 2 yellows;
        // in the end the value with the highest similarity is chosen
	var similarity = function(context1, context2) {
        // console.log("");
        // console.log("############");
        // console.log("New Context");
        // console.log("context1");
        // console.log(context1);
        // console.log("context2");
        // console.log(context2);
        var context11 = context1;
        var context12 = [context1[1],context1[2],context1[0]];
        var context13 = [context1[2],context1[0],context1[1]];
        var context14 = [context1[0],context1[2],context1[1]];
        var context15 = [context1[1],context1[0],context1[2]];
        var context16 = [context1[2],context1[1],context1[0]];
        var allContext1 = [context11, context12, context13, context14, context15, context16];

        var sim = map(function(z) {
            var c2 = getDeepCopy(context2);
            map(function(y) {
                var simArray = map(function(x) {
                   return x[1] == y[1] ? getSimilarity(x, y) : 0;
                },c2)
                var sorted = sort(simArray,gt);
                var maxValue = sorted[0];
                if (maxValue == 0) {
                    return [0];
                } else {
                    var index = _.indexOf(simArray,maxValue);
                    var c2 = index < 0 ? c2 : c2.splice(index,1);
                    return [maxValue];
                };
        },z)}, allContext1);
        var allSims = map(function(r) {return (r[0][0]+r[1][0]+r[2][0])/r.length},sim);
        var sortedSim = sort(allSims,gt);
        var maxSim = sortedSim[0];
        // console.log("maxSim");
        // console.log(maxSim);
        
        return maxSim;
	};


	var literalListener = cache(function(utt, perceivedContext){
		return Infer({method:'enumerate'},function(){
			var object = uniformDraw(perceivedContext);
			factor(uttFitness(utt,object)); 
			return object;
		});
	});

	var speaker = cache(function(target) {
		// list all possible utterances in context
		return Infer({method:'enumerate'},function(){
			var possibleContext = noisyObserve(trueContext)
			var possibleutts = getUtterancesOneFeature(possibleContext);
			var utt = uniformDraw(possibleutts);
			var literalListenerERP = literalListener(utt, possibleContext);
			var uttCost = getUtteranceCost(utt);
			// NEW: get similarity of possible context to true context and factor accordingly
				// similarity, closer to 1 for very similar 
			var similarity = similarity(possibleContext, trueContext);
            // console.log(similarity);
			// var score = params.alpha * literalListenerERP.score(target) - params.lengthWeight * (uttCost);
			var score = params.alpha * literalListenerERP.score(target) - params.lengthWeight * (uttCost) + /*params.simWeight **/ similarity;
			factor(score); 
			return utt;
		});
	});

	var runModel = function(speakerModel, target) { 
		var speakerERP = speakerModel(target);
		return Infer({method:'enumerate'},function(){
			var utt = sample(speakerERP);
			return utt;
		});
	};

	var runListener = function(listenerModel, utterance) { 
		var listenerERP = listenerModel(utterance);
		return Infer({method:'enumerate'},function(){
			var obj = sample(listenerERP);
			return obj;
		});
	};    

	return {
		runModel : runModel,
		speaker : speaker,
		listener: literalListener,
		runListener : runListener
	};
};
