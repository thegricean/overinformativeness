;; Model created September 7 2015 by jdegen

(define (power dist a) (list (first dist) 
                             (map (lambda (x) (pow x a)) (second dist))))

(define listener-opt 1) ; non-standard listener optimality parameter -- leave unchanged

; The standard literal listener that infers a distribution over objects, given an utterance
(define literal-listener 
  (mem (lambda (utterance color_fidelity size_fidelity type_fidelity one_fidelity objs utterances pruned-context utterance-atoms)

         ; The basic lexicon that encodes noisy semantics for words (ie correctly returns true/false with probability determined by fidelity parameter)
         (define (lexicon utterance obj color_fidelity size_fidelity type_fidelity one_fidelity)
           (if (> (list-index (check-features obj) utterance) -1)
               (flip (get-fidelity utterance color_fidelity size_fidelity type_fidelity one_fidelity))
               (flip (- 1 (get-fidelity utterance color_fidelity size_fidelity type_fidelity one_fidelity)))))


         ; Helper function for lexicon: Returns a list of an object's features
         (define (check-features obj)
           (list-ref pruned-context (list-index objs obj)))

         ; Helper function for lexicon: Retrieves the fidelity of a predicate (currently only implemented for color and size)
         ; Danger: assumes only the listed colors and will return size fidelity for ANY predicate that's not in the color list
         (define (get-fidelity utterance color_fidelity size_fidelity type_fidelity one_fidelity)
           (if (> (list-index 
                   '(red orange yellow green blue purple black brown pink white gray)
                   utterance) -1)
               color_fidelity
               (if (> (list-index
                       '(big small)
                       utterance) -1)
                   size_fidelity
                   (if (equal? utterance 'one)
                   		one_fidelity
                   		type_fidelity))
               )) 

         ; Tests whether an object is in the extension of an utterance -- directly applies lexicon if the utterance is a one-word utterance atom; builds meaning compositionally otherwise (only works for at most two-word utterances)
         (define (meaning utterance obj color_fidelity size_fidelity type_fidelity one_fidelity)
           (if (lexical-item? utterance)
               (lexicon utterance obj color_fidelity size_fidelity type_fidelity one_fidelity)
               (comp-meaning utterance obj color_fidelity size_fidelity type_fidelity one_fidelity)))

         ; Helper function for meaning: Splits a two-word utterance into its parts and returns the conjoined sub-meanings
         (define (comp-meaning utterance obj color_fidelity size_fidelity type_fidelity one_fidelity)
           (define subs (regexp-split utterance '_))
           (if (= (length subs) 2)
               (and 
                (meaning (first subs) obj color_fidelity size_fidelity type_fidelity one_fidelity) 
                (meaning (second subs) obj color_fidelity size_fidelity type_fidelity one_fidelity))
               (and
                (meaning (first subs) obj color_fidelity size_fidelity type_fidelity one_fidelity) 
                (meaning (second subs) obj color_fidelity size_fidelity type_fidelity one_fidelity)
                (meaning (third subs) obj color_fidelity size_fidelity type_fidelity one_fidelity))
               ))


         ; Helper function for meaning: Checks whether an utterance is a lexical item (i.e. an utterance atom)
         (define (lexical-item? utterance)
           (> (list-index utterance-atoms utterance) -1))  

         (enumeration-query
          (define obj (uniform-draw objs))

          obj

          (meaning utterance obj color_fidelity size_fidelity type_fidelity one_fidelity)))))

; A pragmatic speaker that infers a distribution over utterances, given an object he has in mind -- TODO: should you be conditioning on truth of utterance?
; Maybe somewhat non-standard: softmax on literal listener
(define pragmatic-speaker 
  (mem (lambda (ob color_fidelity size_fidelity type_fidelity one_fidelity color_cost size_cost type_cost context)

         ; Extracts a list of object IDs for the objects in the context
         (define objs
           (map (lambda (obj)
                  (first obj))
                context))

         ; Helper function for utterances: Strips the original context of object IDs
         (define pruned-context 
           (map (lambda (cont) 
                  (drop cont 1))
                context))		

         ; Helper function for utterances: concatenates an object's features to create a "_"-separated two-word utterance like "big_red" and three-word utterance like "big_red_chair"
         (define (gen-utt obj)
           (list
            (third obj)
            (string-append (first obj) '_ (third obj))
            (string-append (second obj) '_ (third obj))			 
            (string-append (first obj) '_ (second obj) '_ (third obj))
            (string-append (first obj) '_ (fourth obj))
            (string-append (second obj) '_ (fourth obj))			 
            (string-append (first obj) '_ (second obj) '_ (fourth obj))             
            ))
         ;           (append obj (list (string-append (first obj) '_ (second obj) '_ (third obj)))))			

         ; Generates the set of alternatives for the context by taking all feature conjunctions as utterances as well as each individual feature (currently only implemented for two-feature objects)
         (define utterances
           (union (flatten (map (lambda (obj) 
                                  (gen-utt obj)) 
                                pruned-context))))

         ; Helper function for utterance-atoms: Tests whether an utterance consists of just one word (multi-word utterances are separated by "_")
         ;        (define (is-atom? utt) (= (length (regexp-split utt '_)) 1))

         ; Extracts all the utterance atoms (one-word utterances) from the set of contextually generated utterances
         (define utterance-atoms (union (flatten pruned-context))) ; (first (partition is-atom? utterances)))  


         ; Generates a cost vector for the utterances, with a fixed cost for an extra word (free parameter defined at beginning of file). One-word utterances have cost 1.
         (define (costs color_cost size_cost type_cost)
           (map (lambda (utt)
                  (sum (map (lambda (word) 
                              (if (or (equal? word 'red) 
                                      (equal? word 'blue)
                                      (equal? word 'gray)
                                      (equal? word 'green)
                                      (equal? word 'brown)) 
                                  color_cost 
                                  (if (or (equal? word 'big)
                                          (equal? word 'small))
                                      size_cost
                                      type_cost))) 
                            (regexp-split utt '_))))
                utterances))

         (enumeration-query        
          (define utterance (multinomial utterances 
                                         (map (lambda (c) (exp (- c))) (costs color_cost size_cost type_cost))))

          utterance

          (equal? ob
                  (apply multinomial
                         (power 
                          (literal-listener utterance color_fidelity size_fidelity type_fidelity one_fidelity objs utterances pruned-context utterance-atoms) 
                          listener-opt)))
          ))))


(define run-speaker 
  (lambda (obj color_fidelity size_fidelity type_fidelity one_fidelity color_cost size_cost type_cost speaker-opt context)
    (define results (power 
                     (pragmatic-speaker obj color_fidelity size_fidelity type_fidelity one_fidelity color_cost size_cost type_cost (second context)) 
                     speaker-opt))
    (define utts (first results))
    (define probs (second results))
    (define context_label (first context))
    (list (flatten (list 'object 'color_fidelity 'size_fidelity 'type_fidelity 'one_fidelity 'color_cost 'size_cost 'type_cost 'speaker-opt 'context utts)) (flatten (list  obj color_fidelity size_fidelity type_fidelity one_fidelity color_cost size_cost type_cost speaker-opt context_label (map (lambda (p) (/ p (sum probs))) probs))))
    ))	

(define color_fidelities (list .9 .999)) ; 1 - noise probability (color -- higher means less noise)
(define size_fidelities (list .7 .8 .9 .999)) ; 1 - noise probability (size -- higher meanss less noise)
(define type_fidelities (list .7 .8 .9 .95 .999)) ; 1 - noise probability (size -- higher meanss less noise)
(define one_fidelities (list .7 .8 .9 .95 .999)) ; 1 - noise probability (size -- higher meanss less noise)
(define color_costs (list .1)) ; lower means less costly
(define size_costs  (list .1)) ; lower means less costly
(define type_costs  (list .1)) ; lower means less costly
(define speaker-opts (list 5 10 15 18)) 
(define contexts (list
				  (list 'lowvariation_exp1
				        (list (list 'o1 'big 'green 'fan 'one)
				              (list 'o2 'big 'green 'tv 'one)
				              (list 'o3 'big 'green 'desk 'one)
				              (list 'o4 'big 'green 'couch 'one)
				              (list 'o5 'big 'green 'desk 'one)
				              (list 'o6 'big 'green 'chair 'one)
				              (list 'o7 'big 'green 'couch 'one)                                          
				              (list 'o8 'big 'green 'chair 'one)              
				              ))
				  (list 'highvariation_exp1
				        (list (list 'o1 'small 'blue 'couch 'one)
				              (list 'o2 'big 'gray 'chair 'one)
				              (list 'o3 'small 'green 'tv 'one)
				              (list 'o4 'big 'green 'fan 'one)
				              (list 'o5 'big 'red 'fan 'one)
				              (list 'o6 'big 'red 'desk 'one)
				              (list 'o7 'big 'brown 'tv 'one)                                          
				              (list 'o8 'big 'gray 'chair 'one)              
				              )) 
				  (list 'lowvariation_exp2
				        (list (list 'o1 'big 'red 'chair 'one)
				              (list 'o2 'big 'red 'fan 'one)
				              (list 'o3 'small 'red 'desk 'one)
				              (list 'o4 'small 'red 'tv 'one)
				              (list 'o5 'big 'red 'desk 'one)
				              (list 'o6 'small 'red 'chair 'one)
				              (list 'o7 'big 'red 'fan 'one)                                          
				              (list 'o8 'big 'red 'couch 'one)              
				              ))
				  (list 'highvariation_exp2
				        (list (list 'o1 'small 'brown 'chair 'one)
				              (list 'o2 'big 'blue 'desk 'one)
				              (list 'o3 'small 'gray 'fan 'one)
				              (list 'o4 'big 'brown 'chair 'one)
				              (list 'o5 'small 'red 'couch 'one)
				              (list 'o6 'big 'gray 'desk 'one)
				              (list 'o7 'small 'green 'tv 'one)                                          
				              (list 'o8 'big 'blue 'couch 'one)              
				              ))))  
              

(write-csv
	(map (lambda (context)
	       (map (lambda (color_fidelity)
	              (map (lambda (size_fidelity)
		              (map (lambda (type_fidelity)	              
		                     (map (lambda (color_cost)       
	    	                        (map (lambda (size_cost)
		    	                        (map (lambda (type_cost)	                            
		    	                        	(map (lambda (one_fidelity)	                            
												(map (lambda (speaker-opt)       
		    	        	                       	(run-speaker 'o1 color_fidelity size_fidelity type_fidelity one_fidelity color_cost size_cost type_cost speaker-opt context))
													speaker-opts))
												one_fidelities))
											type_costs))
	                            	     size_costs))
		                          color_costs))
		                     type_fidelities))
	                   size_fidelities))				               
	            color_fidelities))
	     contexts)
	"/Users/titlis/cogsci/projects/stanford/projects/overinformativeness/models/3_scene_variation/results/raw/results.txt")