// Helpers
var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};

var colors = ["yellow","orange","red","pink",
	      "green","blue","brown","black"];
var objects = [["blue","apple"], ["green","apple"], ["red","apple"],
	       ["black","avocado"], ["green","avocado"], ["red","avocado"],
	       ["blue","banana"], ["brown","banana"], ["yellow","banana"],
	       ["brown","carrot"], ["orange","carrot"], ["pink","carrot"],
	       ["green","pear"], ["orange","pear"], ["yellow","pear"],
	       ["green","tomato"], ["pink","tomato"], ["red","tomato"],	       
	       ["black","pepper"], ["green","pepper"], ["orange","pepper"],
	       ["red","pepper"]];

// Note that with this set of objects, there are over 2000 unique contexts
var uniqueContexts = Infer({method: 'enumerate'}, function() {
  return sort(repeat(3, function() {return uniformDraw(objects);}));
}).support();

// for all objects in a given context, can name the color, type, or both
var getPossibleUtts = function(context) {
  return _.uniq(_.flatten(map(function(itemArr) {
    return [itemArr[0], itemArr[1], itemArr.join('_')];
  },context)));
};

var makeObj = function(l){
  return _.object(['color', 'type'], l);
};

// from elisa
var colorSim = {
  "yellow" : {
    yellow : 1,
    blue : .05,
    brown : .4,
    green : .5,
    orange : .3,
    red : .09,
    black : .05,
    pink : .05
  }, "black" : {
    yellow : 0.05,
    blue : .2,
    brown : .2,
    green : .05,
    orange : .05,
    red : .1,
    black : 1,
    pink : .05
  },
  "pink" : {
    yellow : 0.05,
    blue : .05,
    brown : .05,
    green : .05,
    orange : .1,
    red : .3,
    black : .05,
    pink : 1
  },
  "blue" : {
    yellow : .05,
    blue : 1,
    brown : .01,
    green : .1,
    orange : .05,
    red : .05,
    black : .2,
    pink : .05
  },
  "brown" : {
    yellow : .4,
    blue : .01,
    brown : 1,
    green : .2,
    orange : .4,
    red : .1,
    black : .2,
    pink : .05
  },
  "green" : {
    yellow : .5,
    blue : .1,
    brown : .2,
    green : 1,
    orange : .05,
    red : .05,
    black : .05,
    pink : .05
  },
  "orange" : {
    yellow : .3,
    blue : .05,
    brown : .4,
    green : .05,
    orange : 1,
    red : .5,
    black : .05,
    pink : .1
  },
  "red" : {
    yellow : .09,
    blue : .05,
    brown : .1,
    green : .05,
    orange : .5,
    red : 1,
    black : .05,
    pink : .3
  }
};

// Kind of a silly PPL algorithm for finding permutations... Should switch to
// something faster if this is a computational bottleneck
var permutations = function(vals) {
  return Infer({method: 'enumerate'}, function() {
    var permute = function(l) {
      if(l.length == 1)  return l;
      var initVal = uniformDraw(l);
      var remaining = remove(initVal, l);
      return [initVal].concat(permute(remaining));
    };
    return permute(vals);
  }).support();
};

// Calculate similarity between two contexts (types must match; colors are graded)
// Note: contexts are unordered, so we take the permutation yielding the
// highest pair-wise match...
var similarity = function(c1, c2) {
  var c1_obj = map(makeObj, c1);
  var c2_obj = map(makeObj, c2);
  return _.max(map(function(c1Perm) {
    return sum(map2(function(c1Val, c2Val) {
      var diffType = c1Val.type != c2Val.type;
      return diffType ? 0 : colorSim[c1Val.color][c2Val.color];
    }, c1Perm, c2_obj));
  }, permutations(c1_obj)));
};
