// run using:
// webppl BDA.wppl --require ./refModule/

var data = refModule.readCSV("./bdaInput/bda_data.csv");
console.log("Loading data complete...",+data.length+" data points");

var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading unique conditions complete..."+conditions.length+" conditions");

// Cache so we don't have to incur cost of loading json every iteration
var realValuedLexicon = refModule.getLexicon('realValued');

// Fix some configuration options
var globalConfig = {
  'lexiconChoice' : 'empirical',
  'costsChoice' : 'empirical',
  'noiseType' : 'none',
  'storePredictives' : true,
  'outputFileName' : 'Shiny'
};

var modelAnalysis = function() {
  // Params for all versions of the model
  var baseParams = { //25920//28160//1536//256
    // alpha : uniformDraw(_.range(5, 6, 0.25)), // 4
    // colorCost : uniformDraw(_.range(-5, -4, 0.25)), // 4
    // typeCost : uniformDraw(_.range(-6, -5, 0.25)) // 4
    alpha : 10,
    colorCost : 0,
    typeCost : -1.5
    // alpha : uniformDraw(_.range(0.5, 4.5, 0.5)), // 6
    // colorCost : uniformDraw(_.range(0, 1.5, 0.25)), // 5
    // typeCost : uniformDraw(_.range(0, 2.5, 0.5)), // 9
    // gramCost : uniformDraw(_.range(2, 5, 0.5)) // 6
  };

  // Additional params for particular versions
  var empCostParams = (globalConfig.costsChoice == 'empirical' ? {
    lengthWeight : 0.5
    // lengthWeight : uniformDraw(_.range(0.25, 1.1, 0.25)) // 4
    // lengthWeight : uniformDraw(_.range(0, 1, 0.25)) // 4
  } : {});

  var empTypicalitiesParams = (globalConfig.lexiconChoice == 'empirical' ? {
    typWeight: 6
    // typWeight : uniformDraw(_.range(3, 4, 0.25)) // 4
    // typWeight : uniformDraw(_.range(0, 4, 1)) // 4
  } : {});
  
  var noiseParams = (globalConfig.noiseType != 'none' ? {
    noiseRate : uniformDrift({a: 0, b: 1, width: 1/20})
  } : {});

  // Combine params together
  var params = extend(baseParams, empCostParams, noiseParams, empTypicalitiesParams);
  console.log(params);
  
  var score = reduce(function(conditionObj, memo) {
    // Extract condition information
    var conditionName = conditionObj.conditionName;
    var context = [[conditionObj.t_color, conditionObj.t_type],
		   [conditionObj.d1_color, conditionObj.d1_type],
		   [conditionObj.d2_color, conditionObj.d2_type]];
    var target = context[0];

    // Run model
    var modelParams = extend(params, globalConfig, {'lexicon': realValuedLexicon});
    var speakerModel = initializeModel(modelParams);
    var modelOutput = speakerModel(target, context);
    // console.log("modelOutput");
    // console.log(modelOutput);
    // console.log("modelOutput.support()");
    // console.log(modelOutput.support());
    
    // Store predictives
    if(globalConfig.storePredictives) {
      // modelOutput.support() gives utterances for context
      foreach(modelOutput.support(), function(s){
      	var key = _.values(conditionObj).concat(s);
      	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
        // console.log("[Math.exp(modelOutput.score(s))]");
        // console.log([Math.exp(modelOutput.score(s))]);
        // console.log("key");
        // console.log(key);
        // console.log("newPair");
        // console.log(newPair);
      	globalStore.predictives = extend(globalStore.predictives, newPair);
        // console.log("globalStore.predictives");
        // console.log(globalStore.predictives);
      });
    }
    
    // condition on data
    var itemData = refModule.getSubset(data, conditionObj);
    // console.log("conditionObj");
    // console.log(conditionObj);
    // console.log("itemData");
    // console.log(itemData);

    return memo + reduce(function(datum, memo) {
      return modelOutput.score(datum.utterance) + memo;
    }, 0, itemData);
  }, 0, conditions);

  // console.log(params);
  // console.log("factor(score)");
  // console.log(factor(score));

  factor(score);
  // console.log("globalStore.predictives");
  // console.log(globalStore.predictives);
  return {predictive: globalStore.predictives, params : params};
};


var outputERP = Infer({method:'enumerate'}, modelAnalysis);

// var outputERP = Infer({method:'MCMC', samples: 500, lag: 2, burn: 100, verbose: true},
// 		      modelAnalysis);

// console.log(outputERP)

refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
