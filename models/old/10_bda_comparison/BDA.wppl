// run using:
// webppl BDA.wppl --require ./refModule/

var data = refModule.readCSV("./bdaInput/bda_data.csv");
console.log("Loading data complete...",+data.length+" data points");

var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading unique conditions complete..."+conditions.length+" conditions");

// Cache so we don't have to incur cost of loading json every iteration
var realValuedLexicon = refModule.getLexicon('realValued');

// Fix some configuration options
var globalConfig = {
  'lexiconChoice' : 'empirical',
  'costsChoice' : 'empirical',
  'noiseType' : 'addition',
  'storePredictives' : false,
  'outputFileName' : 'empiricalCosts_noiseAdd'
};

var modelAnalysis = function() {
  // Params for all versions of the model
  var baseParams = {
    alpha : uniformDrift({a:0,b:20,width:20/20}),
    colorCost : uniformDrift({a:-10,b:10,width:20/20}),
    typeCost : uniformDrift({a:-10,b:10,width:20/20})
  };

  // Additional params for particular versions
  var empCostParams = (globalConfig.costsChoice == 'empirical' ? {
    lengthWeight : uniformDrift({a: 0, b: 1, width: 1/20})
  } : {});

  var empTypicalitiesParams = (globalConfig.lexiconChoice == 'empirical' ? {
    typWeight : uniformDrift({a:0, b:10, width:10/20})
  } : {});
  
  var noiseParams = (globalConfig.noiseType != 'none' ? {
    noiseRate : uniformDrift({a: 0, b: 1, width: 1/20})
  } : {});

  // Combine params together
  var params = extend(baseParams, empCostParams, noiseParams, empTypicalitiesParams);
  
  var score = reduce(function(conditionObj, memo) {
    // Extract condition information
    var conditionName = conditionObj.conditionName;
    var context = [[conditionObj.t_color, conditionObj.t_type],
		   [conditionObj.d1_color, conditionObj.d1_type],
		   [conditionObj.d2_color, conditionObj.d2_type]];
    var target = context[0];

    // Run model
    var modelParams = extend(params, globalConfig, {'lexicon': realValuedLexicon});
    var speakerModel = initializeModel(modelParams);
    var modelOutput = speakerModel(target, context);
    
    // Store predives
    if(globalConfig.storePredictives) {
      foreach(modelOutput.support(), function(s){
	var key = _.values(conditionObj).concat(s);
	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
	globalStore.predictives = extend(globalStore.predictives, newPair);
      });
    }
    
    // condition on data
    var itemData = refModule.getSubset(data, conditionObj);
    return memo + reduce(function(datum, memo) {
      return modelOutput.score(datum.utterance) + memo;
    }, 0, itemData);
  }, 0, conditions);

  console.log(params);
  console.log(score);

  factor(score);
  return {predictive: globalStore.predictives, params : params};
};

var outputERP = Infer({method:'MCMC', samples: 500, lag: 2, burn: 100, verbose: true},
		      modelAnalysis);

refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
