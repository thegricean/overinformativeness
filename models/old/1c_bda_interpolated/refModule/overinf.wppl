var uniformDraw = function (xs) {
  return xs[randomInteger(xs.length)];
};

var mean = function(thunk){
  return expectation(Enumerate(thunk), function(v){return v;});
};

var negate = function(predicate){
  return function(x){
    return !predicate(x);
  };
};

var identity = function(x){
 return x;
};

var condition = function(x){
 factor(x ? 0 : -Infinity);
};

var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};

var getTypicalities = function() {
    var typicalityData = refModule.readCSV("./bdaInput/typicalities.csv");
    // var typicalityData = refModule.readCSV("./bdaInput/typicalities_raw.csv");    
    var unique_objects = _.unique(map(function(row) {
      return row[0];
    },typicalityData));

    var typicalities = [];
    var consData = map(function(unique_obj) {
      var matching_objs = refModule.getTypSubset(typicalityData,unique_obj);
      var mo_array = map(function(matching_obj) {
        return matching_obj.slice(1,3);
      },matching_objs);
      return [unique_obj,_.invert(_.object(mo_array))];
    }, unique_objects);

    return _.object(consData);
};

var typicality_norms = getTypicalities();

var getUtterances = function(context) {
  var utts = [];
  
  map(function(c) {
    map(function(k) {
        utts.push(k+"_"+c[2]);
    },c.slice(0,2));
    utts.push(c[0]+"_"+c[1]+"_"+c[2]);
     utts.push(c[2]); // comment out this line if you don't want the noun alone to be an alternative
  },context);
  return _.unique(utts);
};

var OverinformativeModel = function(params, context) {

  var getUtteranceCost = function(utt) {
  var splited = utt.split("_");
  if (splited.length == 3) {
    return params.cost_color + params.cost_size + params.cost_type;
  } else {
    if (splited.length == 2) {
      return _.contains(["color","othercolor","brown", "red", "black", "blue", "purple", "green", "white", "yellow", "pink", "orange"], splited[0]) ? params.cost_type + params.cost_color : params.cost_type + params.cost_size;
    } else {
      return params.cost_type;
    }
  }
  };

  var checkFeature = function(utterancetype,object,u) {
    if (utterancetype === "color") {
      return _.contains(object,u) ? params.typicality_color : 1 - params.typicality_color; 
    } else {
      if (utterancetype === "size") {
        return _.contains(object,u) ? params.typicality_size : 1 - params.typicality_size; 
      } else {
        if (utterancetype === "type") {
          return _.contains(object,u) ? params.typicality_type : 1 - params.typicality_type;     
        } else {
          return -555;
        }
      }
    }
  };

  var getTypicality = function(utt, object) {
    var splitutt = utt.split("_");
     var typicalities = map(function(u) {
        if (_.contains(["color","othercolor","brown", "red", "black", "blue", "purple", "green", "white", "yellow", "pink", "orange"], u)) {
          return checkFeature("color",object,u);  
        } else {
          if (_.contains(["big","small","size","othersize"],u)) {
            return checkFeature("size",object,u);
          } else {
            return checkFeature("type",object,u);
          }
        }
    },splitutt);

    var typicality = reduce(function(a,b) {return a*b;},1,typicalities); 

    return typicality;
  };

  var checkFeatureEmpirical = function(utterancetype,object,u,reduced_obj) {
  if (utterancetype === "color") { // this part will actually return the typicality of the COLOR_TYPE combination, not just color alone
    // console.log("getting color typicality"); 
    // console.log(typicalities[reduced_obj][reduced_obj]);
    return _.contains(object,u) ? typicality_norms[reduced_obj][reduced_obj] : 1 - params.typicality_color; 
  } else {
    if (utterancetype === "size") {
      return _.contains(object,u) ? params.typicality_size : 1 - params.typicality_size; 
    } else {
      if (utterancetype === "type") {
        return _.contains(object,u) ? typicality_norms[reduced_obj][u] : 1 - params.typicality_type;     
      } else {
        return -555;
      }
    }
  }
 };

 var getEmpiricalTypicality = function(utt, object) {
    var splitutt = utt.split("_");
    // next two lines: get rid of type when utterance contains a color, so you don't accidentally return product of color_type and type typicality
    if (splitutt.length == 2 && _.contains(["color","othercolor","brown", "red", "black", "blue", "purple", "green", "white", "yellow", "pink", "orange"], splitutt[0])) { splitutt.pop(); }
    if (splitutt.length == 3) { splitutt.pop(); } 
    var reduced_obj = [object[1],object[2]].join("_");

     var typicalities = map(function(u) {
        if (_.contains(["color","othercolor","brown", "red", "black", "blue", "purple", "green", "white", "yellow", "pink", "orange"], u)) {
          return checkFeatureEmpirical("color",object,u,reduced_obj);  
        } else {
          if (_.contains(["big","small","size","othersize"],u)) {
            return checkFeatureEmpirical("size",object,u,reduced_obj);
          } else {
            return checkFeatureEmpirical("type",object,u,reduced_obj);
          }
        }
    },splitutt);

    var typicality = reduce(function(a,b) {return a*b;},1,typicalities); 

    return typicality;
  };

  var uttFitness = function(utt, object) {
      var splitutt = utt.split("_"); 
      var fixedfit = getTypicality(utt,object); 
      var typfit = getEmpiricalTypicality(utt,object); 
      // console.log(utt+"...."+object+"...."+typfit);
      // var fixedtypfit = getFixedTypicality(utt,object); 
      // console.log(typfit);
      // var deterministicfit = sum(map(function(s) {
        // _.contains(object,s) ? 1 : 0;
        // _.has(object,s) ? 1 : 0;
      // }, splitutt));
      // console.log(deterministicfit);
      // var detfit = deterministicfit == splitutt.length ? 0 : -Infinity;
      // console.log(detfit);
      var weightedfit = params.typWeight*typfit + (1-params.typWeight)*fixedfit;
      // return weightedFit;
      // return detfit;
      // console.log("utt:");
      // console.log(utt);
      // console.log("obj:");
      // console.log(object);
      // console.log("typfit:")
      // console.log(typfit);
      // // return weightedFit; // return mixture of fixed and empirical values
      return weightedfit; // return semantics under empirical individual color typicality values
    };

    var literalListener = cache(function(utt){
      return Infer({method:'enumerate'},function(){
        var object = uniformDraw(context);
        // console.log(utt);
        // console.log(obj);
        factor(uttFitness(utt,object)); 
        return object;
      });
    });
    
    var speaker = cache(function(target) {
      var possibleutts = getUtterances(context);

      return Infer({method:'enumerate'},function(){
        var utt = uniformDraw(possibleutts);
        var literalListenerERP = literalListener(utt);
        var uttCost = getUtteranceCost(utt); 
        var score = params.alpha * literalListenerERP.score(target) - params.lengthWeight * uttCost;
        factor(score); 
        return utt;
      });
    });

    var runModel = function(speakerModel, target) { 
      var speakerERP = speakerModel(target);
      return Infer({method:'enumerate'},function(){
        var utt = sample(speakerERP);
        return utt;
      });
    };  
  
  return {
    runModel : runModel,
    speaker : speaker
  };
};
