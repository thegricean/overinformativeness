// run using:
// webppl runOverinformativenessModel-loadtypicalities.wppl --require ./refModule/
var getTypicalities = function() {
    var typicalityData = refModule.readCSV("./bdaInput/typicalities_raw.csv");
    // console.log(typicalityData);
    var unique_objects = _.unique(map(function(row) {
      return row[0];
    },typicalityData));

    var typicalities = [];
    // console.log(unique_objects);
    var consData = map(function(unique_obj) {
      // console.log(unique_obj);
      // var typ = function(row) {
      //   return (row[0] === unique_obj);
      // };
      // console.log(typ(typicalityData[2]));
      var matching_objs = refModule.getTypSubset(typicalityData,unique_obj);
      // var matching_objs = _.filter(typicalityData,typ);
      // console.log("an object");
      // console.log(matching_objs);

      // return matching_objs;

    // return _.filter(typicalityData,typ);
      var mo_array = map(function(matching_obj) {
        // console.log("an object's unique utterance");
        // console.log(matching_obj.slice(1,3));
        
          // return _.object([matching_obj[2]],[matching_obj[1]]);
          return matching_obj.slice(1,3);
      },matching_objs);
      // console.log("a zipped array of typicalities and utterances");
      // console.log(_.invert(_.object(mo_array)));
      // console.log(unique_obj);
      // console.log(_.object([unique_obj,_.invert(_.object(mo_array))]));
      return [unique_obj,_.invert(_.object(mo_array))];
    }, unique_objects);

    // // return typicalities;
    return _.object(consData);
};

var typicality_norms = getTypicalities();
// console.log(typicality_norms);


// contexts in Fig 1a in paper
// var context = [
//   ["size","blue","thumbtack"],
//   ["othersize","blue","thumbtack"],
//   ["othersize","red","thumbtack"]
// ];

// contexts in Fig 1b in paper
//   var context = [
//     ["size","blue","thumbtack"],
//     ["size","red","thumbtack"],
//     ["othersize","red","thumbtack"]
// ];

// contexts from Koolen et al 2013 
// var contexts = [
//                 {condition:"lowvariation_exp1", 
//                  context:[["big", "green", "fan"],
//                    ["big", "green", "tv"],
//                    ["big", "green", "desk"],
//                    ["big", "green", "couch"],
//                    ["big", "green", "desk"],
//                    ["big", "green", "chair"],
//                    ["big", "green", "couch"],                                          
//                    ["big", "green", "chair"]]},
//                 {condition:"highvariation_exp1", 
//                  context:[["small", "blue", "couch"],
//                    ["big", "gray", "chair"],
//                    ["small", "green", "tv"],
//                    ["big", "green", "fan"],
//                    ["big", "red", "fan"],
//                    ["big", "red", "desk"],
//                    ["big", "brown", "tv"],                                          
//                    ["big", "gray", "chair"]]},
//                 {condition:"lowvariation_exp2", 
//                  context:[["big", "red", "chair"],
//                    ["big", "red", "fan"],
//                    ["small", "red", "desk"],
//                    ["small", "red", "tv"],
//                    ["big", "red", "desk"],
//                    ["small", "red", "chair"],
//                    ["big", "red", "fan"],                                          
//                    ["big", "red", "couch"]]},
//                 {condition:"highvariation_exp2", 
//                  context:[["small", "brown", "chair"],
//                  ["big", "blue", "desk"],
//                  ["small", "gray", "fan"],
//                  ["big", "brown", "chair"],
//                  ["small", "red", "couch"],
//                  ["big", "gray", "desk"],
//                  ["small", "green", "tv"],                                          
//                  ["big", "blue", "couch"]]},                 
//                  ]; 

// contexts for our scene variation effect
// var contexts = [
// 				{condition:"color_2_1",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"color_2_2",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"]]},
// 				{condition:"color_3_1",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"color_3_2",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["small","red","thing"]]},				 					 	
// 				{condition:"color_3_3",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"]]},
// 				{condition:"color_4_1",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"color_4_2",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"]]},				 					 	
// 				{condition:"color_4_3",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"color_4_4",
// 				 context:[["big","blue","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"],
// 				 	["big","red","thing"]]},
// 				{condition:"size_2_1",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"size_2_2",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"]]},
// 				{condition:"size_3_1",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"size_3_2",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","red","thing"]]},				 					 	
// 				{condition:"size_3_3",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"]]},
// 				{condition:"size_4_1",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"size_4_2",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","red","thing"],
// 				 	["small","red","thing"]]},				 					 	
// 				{condition:"size_4_3",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","red","thing"]]},
// 				{condition:"size_4_4",
// 				 context:[["big","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"],
// 				 	["small","blue","thing"]]}				 	
// ];

// contexts for color predictability effect
var contexts = [[["yellow", "banana"],
   			   	   ["yellow", "bla"],
				   ["brown", "bla"],
				   ["brown", "bla"],
				   ["blue", "bla"],
				   ["blue", "bla"]],
			   [["brown", "banana"],
				   ["brown", "bla"],
				   ["yellow", "bla"],
	   			   ["yellow", "bla"],
				   ["blue", "bla"],
				   ["blue", "bla"]],
			   [["blue", "banana"],
				   ["blue", "bla"],
				   ["yellow", "bla"],
	   			   ["yellow", "bla"],
				   ["brown", "bla"],
				   ["brown", "bla"]]];				   

var typtype = "unlogged";
// var typtype = "logged";
var searchtype = "wide";
// var searchtype = "narrow";

// set this depending on aspect of model you're probing
// var modeltype = "basic"; //basic asymmetry
// var modeltype = "scene_variation_koolen"; //scene variation effects a la koolen et al 2013
// var modeltype = "scene_variation";
var modeltype = "color_predictability";

// var alphas = [5,10,15,20,25,30,35];
// var lengthWeights = [1];//[0,1,2,3,4,5];
// var typicality_colors = [.001,.1,.2,.3,.4,.5,.6,.7,.8,.9,.95,.999];
// var typicality_sizes = [.001,.1,.2,.3,.4,.5,.6,.7,.8,.9,.95,.999];
// var typicality_types = [.9];//.8,.9,.95,.999];
// var cost_colors = [1];
// var cost_sizes = [1];


var params = {
  alpha : 12,
  lengthWeight : 5,
  typicality_color : .999,
  typicality_size : .999,
  typicality_type : .999,
  // typWeight : 1,
  cost_color : 1,
  cost_size : 1,
  cost_type : 1
};

// var model = OverinformativeModel(params,context,typicality_norms);
// var listener = model.listener;
// var runListener = model.runListener;
// var output  = runListener(listener,"banana");
// var runModel = model.runModel;
// var speaker = model.speaker;
// var output = runModel(speaker,["yellow", "banana"]);
// console.log(output);

// special typicality case:

  // var context = [
  // 	["size","blue","golfball"],
  //   // ["size","blue","golfball"],
  //   // ["size","blue","golfball"],
  //   ["othersize","blue","golfball"],
  //   // ["othersize","blue","golfball"],
  //   // ["othersize","blue","golfball"],
  // 	// ["othersize","blue","golfball"]
  //   // ["othersize","pink","golfball"]
  //   ["othersize","pink","golfball"],
  //   ["othersize","pink","golfball"],    
  //   ["othersize","pink","golfball"]
  //   // ["othersize","blue","golfball"],
  //   // ["othersize","blue","golfball"]
  // ];
//   // var modelOutput = runModel(speaker, ["size","blue","golfball"]);
//   // var modelOutput = runModel(speaker, ["othersize","pink","golfball"]);
//   // var modelOutput = runModel(speaker, ["size","green","avocado"]);
//   // var modelOutput = runModel(speaker, ["othersize","black","avocado"]);
//   // var utts = ["golfball","size_golfball","blue_golfball","size_blue_golfball"];
//   // map(function(utt) {
//   //   var listenerOutput = runListener(listener, utt);
//   //   // console.log(listenerOutput);
//   //   refModule.writeERP(listenerOutput, [utt], "results_model/data/listener.csv",2);
//   // },utts);

//   // map(function(c) {
//     // var modelOutput = runModel(speaker, c);
//     // console.log(modelOutput);
//     // refModule.writeERP(modelOutput, [c], "results_model/data/speaker.csv",2);
//   // },context);
//   // var modelOutput = runModel(speaker, ["size","blue","golfball"]);
  

  // map(function(al) {
  //   console.log("next alpha: "+al);
  //   map(function(le) {
  //     map(function(tc) {
  //       // console.log("color fidelity: "+tc);
  //       map(function(ts) {
  //         map(function(tt) { // comment this out if not varying typicality of type
  //         map(function(cc) {
  //           map(function(cs) {  
              map(function(context) { // comment out if not running with modeltype = "scene_variation_koolen"

  //               // console.log(context);
  //               var model = OverinformativeModel({
  //                               alpha : al,
  //                               lengthWeight : le,
  //                               typicality_color : tc,
  //                               typicality_size : ts,
  //                               typicality_type : tt, //.95,// modify?
  //                               cost_color : cc,
  //                               cost_size : cs,
  //                               cost_type : 1},
  //                               // context,typicality_norms); 
  //                               context.context,typicality_norms);// use this line if modeltype == "scene_variation_koolen"
  			 var model = OverinformativeModel(params,context,typicality_norms);
              var runModel = model.runModel;
              var speaker = model.speaker;
              var listener = model.listener;
              var runListener = model.runListener;
		// qualitative effects for paper (modeling section)
            // write listener results

    //           if (modeltype == "basic") {
    //             var utts = ["thumbtack","size_thumbtack","blue_thumbtack","size_blue_thumbtack","othersize_thumbtack","red_thumbtack","othersize_red_thumbtack","othersize_blue_thumbtack"];
    //             map(function(utt) {
    //               var listenerOutput = runListener(listener, utt);
    //               // write listener results 
    //               refModule.writeERP(listenerOutput, [al,le,tc,ts,cc,cs,utt], "results_model/data/"+modeltype+"/listener_"+typtype+"_"+searchtype+".csv",2);
    //             },utts);
    //             // write speaker results (size sufficient)
    //             var modelOutput = runModel(speaker, ["size","blue","thumbtack"]);
    //             refModule.writeERP(modelOutput, [al,le,tc,ts,cc,cs,"size_sufficient"], "results_model/data/"+modeltype+"/speaker_"+typtype+"_"+searchtype+".csv",2);            
    //             // write speaker results (color sufficient)
    //             var modelOutput = runModel(speaker, ["othersize","red","thumbtack"]);
    //             refModule.writeERP(modelOutput, [al,le,tc,ts,cc,cs,"color_sufficient"], "results_model/data/"+modeltype+"/speaker_"+typtype+"_"+searchtype+".csv",2);                        
    //             // console.log(modelOutput);
    //           } else { // ie, if modeltype == "scene_variation_koolen"
    //             var modelOutput = runModel(speaker, context.context[0]); // adjust target
    //             // refModule.writeERP(modelOutput, [al,le,tc,ts,tt,cc,cs,"size_sufficient",context.condition], "results_model/data/"+modeltype+"/speaker_"+typtype+"_"+searchtype+".csv",2);            
				// refModule.writeERP(modelOutput, [al,le,tc,ts,tt,cc,cs,context.condition], "results_model/data/"+modeltype+"/speaker_"+typtype+"_"+searchtype+".csv",2);                            
    //           }
    		console.log(runModel(speaker,context[0]));
             
              }, contexts); // comment out if not running with modeltype = "scene_variation_koolen"
  //           }, cost_sizes);          
  //         }, cost_colors);
  //       }, typicality_types);
  //       }, typicality_sizes);
  //     }, typicality_colors);
  //   }, lengthWeights);
  // }, alphas);
